#! /usr/bin/env python3

import requests, json, pickle
from pathlib import Path
from datetime import date
from optparse import OptionParser
from colorama import Fore, Back, Style
from time import strftime, localtime, sleep, time

status_color = {
    '+': Fore.GREEN,
    '-': Fore.RED,
    '*': Fore.YELLOW,
    ':': Fore.CYAN,
    ' ': Fore.WHITE
}

def display(status, data, start='', end='\n'):
    print(f"{start}{status_color[status]}[{status}] {Fore.BLUE}[{date.today()} {strftime('%H:%M:%S', localtime())}] {status_color[status]}{Style.BRIGHT}{data}{Fore.RESET}{Style.RESET_ALL}", end=end)

def get_arguments(*args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg[0], arg[1], dest=arg[2], help=arg[3])
    return parser.parse_args()[0]

download_application = False
download_exploits = True
download_screenshots = True

headers = {
    'Host': 'www.exploit-db.com',
    'Sec-Ch-Ua': '"Not_A Brand";v="8", "Chromium";v="120"',
    'Sec-Ch-Ua-Mobile': '?0',
    'Sec-Ch-Ua-Platform': '"Linux"',
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.6099.71 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Sec-Fetch-Site': 'none',
    'Sec-Fetch-Mode': 'navigate',
    'Sec-Fetch-User': '?1',
    'Sec-Fetch-Dest': 'document',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
    'Priority': 'u=0, i',
    'Connection': 'close'
}

if __name__ == "__main__":
    arguments = get_arguments(('-w', "--write", "write", "Name of the Folder for the Data to be dumped"),
                              ('-a', "--application", "application", f"Download Applications if available (True/False, Default={download_application})"),
                              ('-e', "--exploit", "exploit", f"Download Exploits (True/False, Default={download_application})"),
                              ('-s', "--screenshot", "screenshot", f"Download Screenshots (True/False, Default={download_screenshots})"))
    if not arguments.write:
        arguments.write = f"{date.today()} {strftime('%H_%M_%S', localtime())}"
    if arguments.application == "True":
        download_application = True
    if arguments.exploit == "False":
        download_exploits = False
    if arguments.screenshot == "False":
        download_screenshots = False
    cwd = Path.cwd()
    write_folder = cwd / arguments.write
    write_folder.mkdir(exist_ok=True)
    if download_application == True:
        application_folder = write_folder / "applications"
        application_folder.mkdir(exist_ok=True, parents=True)
    if download_exploits == True:
        exploit_folder = write_folder / "exploits"
        exploit_folder.mkdir(exist_ok=True, parents=True)
    if download_screenshots == True:
        screenshot_folder = write_folder / "screenshots"
        screenshot_folder.mkdir(exist_ok=True, parents=True)
    response = requests.get("https://exploit-db.com/", headers=headers)
    xsrf_token = response.headers["Set-Cookie"].split("XSRF-TOKEN=")[1].split(';')[0]
    exploit_database_session = response.headers["Set-Cookie"].split("exploit_database_session=")[1].split(';')[0]
    headers["Cookie"] = f"XSRF-TOKEN={xsrf_token}; exploit_database_session={exploit_database_session}"
    headers["Accept"] = "application/json, text/javascript, */*; q=0.01"
    headers["X-Requested-With"] = "XMLHttpRequest"
    headers["Sec-Fetch-Site"] = "same-origin"
    headers["Sec-Fetch-Mode"] = "cors"
    headers["Sec-Fetch-Dest"] = "empty"
    headers["Referer"] = "https://www.exploit-db.com/"
    headers["Priority"] = "u=1, i"
    data, total_exploits, draw, length = [], None, 1, 120
    t1 = time()
    while True:
        response = requests.get(f"https://exploit-db.com/?draw={draw}&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start={draw*length}&length={length}&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type=&tag=&platform=", headers=headers)
        xsrf_token = response.headers["Set-Cookie"].split("XSRF-TOKEN=")[1].split(';')[0]
        exploit_database_session = response.headers["Set-Cookie"].split("exploit_database_session=")[1].split(';')[0]
        headers["Cookie"] = f"XSRF-TOKEN={xsrf_token}; exploit_database_session={exploit_database_session}"
        json_response = json.loads(response.text)
        data.extend(json_response["data"])
        if total_exploits == len(data):
            break
        total_exploits = len(data)
        display('*', f"Request Number => {Back.MAGENTA}{draw}{Back.RESET}, Exploits Found = {Back.MAGENTA}{total_exploits}{Back.RESET}", start='\r', end='')
        draw += 1
    t2 = time()
    with open("data", 'rb') as file:
        data = pickle.load(file)
    display('+', f"Time Taken = {Back.MAGENTA}{t2-t1:.2f}{Back.RESET}", start='\n')
    display(':', f"Dumping Raw Data to file {Back.MAGENTA}{arguments.write}/raw_data{Back.RESET}")
    with open(f"{arguments.write}/raw_data", 'wb') as file:
        pickle.dump(data, file)
    display('+', f"Dumped Raw Data to file {Back.MAGENTA}{arguments.write}/raw_data{Back.RESET}")
    display(':', f"Processing Data...")
    t1 = time()
    processed_data, applications_downloaded, screenshots_downloaded, exploits_downloaded = [], 0, 0, 0
    for index, exploit in enumerate(data):
        processed_exploit = {}
        processed_exploit["ID"] = exploit["id"]
        processed_exploit["Description"] = exploit["description"][1]
        processed_exploit["Type"] = exploit["type_id"]
        processed_exploit["Platform"] = exploit["platform_id"]
        processed_exploit["Author"] = exploit["author_id"][1]
        processed_exploit["Author ID"] = exploit["author_id"][0]
        processed_exploit["Date Published"] = exploit["date_published"]
        processed_exploit["Verified"] = "True" if exploit["verified"] == 1 else "False"
        if exploit["application_path"] != '':
            processed_exploit["Application"] = exploit["application_path"]
            processed_exploit["Application MD5"] = exploit["application_md5"].split('/')[2].split('-')[0]
            processed_exploit["Application Link"] = f"https://exploit-db.com/apps/{processed_exploit['Application MD5']}-{processed_exploit['Application']}"
            if download_application == True:
                application_response = requests.get(processed_data["Application Link"])
                with open(f"{arguments.write}/applications/{processed_exploit['Application MD5']}-{processed_exploit['Application']}", 'wb') as application:
                    application.write(response.content)
                applications_downloaded += 1
        if exploit["port"] != 0:
            processed_exploit["port"] = exploit["port"]
        if exploit["screenshot_path"] != '':
            processed_exploit["Screenshot Link"] = f"https://exploit-db.com/{exploit['screenshot_path']}"
            if download_screenshots:
                screenshot_response = requests.get(processed_exploit["Screenshot Link"])
                with open(f"{arguments.write}/screenshots/{processed_exploit['id']}.{processed_exploit['Screenshot Link'].split('.')[-1]}", 'wb') as screenshot:
                    screenshot.write(screenshot_response.content)
                screenshots_downloaded += 1
        if exploit["tags"] != []:
            processed_exploit["Tags"] = exploit["tags"]
        else:
            processed_exploit["Tags"] = ["None"]
        if exploit["code"] != '':
            processed_exploit["Code"] = []
            for exploit_code in exploit["code"]:
                processed_exploit["Code"].append({"Exploit ID": exploit_code["exploit_id"], "Code": exploit_code["code"]})
        if exploit["download"] != '' and download_exploits == True:
            exploit_response = requests.get(f"https://exploit-db.com/raw/{processed_exploit['ID']}")
            with open(f"{arguments.write}/exploits/{processed_exploit['ID']}", 'wb') as exploit_file:
                exploit_file.write(exploit_response.content)
            exploits_downloaded += 1
        processed_data.append(processed_exploit)
        display('*', f"{index+1}/{len(data)} ({(index+1)/len(data)*100:.2f}%)", start='\r', end='')
    t2 = time()
    display('+', f"Done in {Back.MAGENTA}{t2-t1:.2f}{Back.RESET}", start='\n')
    display(':', f"\tApplications Downloaded = {Back.MAGENTA}{applications_downloaded}{Back.RESET}")
    display(':', f"\tScreenshots Downloaded = {Back.MAGENTA}{screenshots_downloaded}{Back.RESET}")
    display(':', f"\tExploits Downloaded = {Back.MAGENTA}{exploits_downloaded}{Back.RESET}")
    display(':', f"Dumping Processed Data to file {Back.MAGENTA}{arguments.write}/data{Back.RESET}")
    with open(f"{arguments.write}/data", 'wb') as file:
        pickle.dump(processed_data, file)
    display('+', f"Dumped Processed Data to file {Back.MAGENTA}{arguments.write}/data{Back.RESET}")